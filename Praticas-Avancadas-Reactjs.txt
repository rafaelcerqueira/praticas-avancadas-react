Práticas avançadas em projetos com ReactJs

Ciclo de vida React
	- Inicialização
	- Montagem
	- Atualização
	- Desmontagem
	
	  /*
  componentWillMount está depreciado desde o ReactJs na versão 17, não é recomendando utilizar em novos projetos.  

  componentWillMount() {
    console.log('componentWillMount');
  }
*/
  componentDidMount() {
    console.log('componentDidMount');
  }
  

Hooks - São uma nova adição ao React. Eles permitem que você use o state e outros recursos do React sem escrever uma classe.

Algumas Hooks:

	- useState
	- useEffect
	- use Context
	- use Reducer
	- useCallback
	- useMemo
	- useRef
	- useImperativeHandle
	- useLayoutEffect
	- useDebugValue

Hooks não devem ser usados em funções JavaScript comuns. Em vez disso, pode-se;
    - chamar hooks em componentes React.
    - chamar hooks dentro de hooks customizados.
Seguindo essas regras, você garande que toda a lógica de estado (state) no componente seja claramente visível no código fonte.


Context API - 


Dumb Components:

 - Preocupa-se com a apresentação;
 - Recebem valores via props;
 - Não possuem dependências com o restante da aplicação;
 - Não especificam como os dados são carregados ou sofrem mutação;
 - Recebem valores e callbacks exclusivamente via props;
 - Raramente possuem estado, quando precisam de estado é para controlar a interface e não os dados do usuário;
 - São escritos na maioria das vezes como componentes funcionais.

    Exemplos: Button, Card, Sidebar, Footer, List, Menu.

Smart Components:

 - Preocupam-se como as coisas vão funcionar;
 - Podem conter Smart e Dumb Components;
 - Providenciam dados e padrões de apresentação ou outros containers;
 - Na maioria dos casos, possuem estado e podem chamar outros fluxos do sistema.

    Exemplos: UserGallery, UserPage, FilterBook, FollowersSidebar, ListCards.

